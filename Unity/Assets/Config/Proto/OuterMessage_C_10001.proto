syntax = "proto3";
package ET;

message HttpGetRouterResponse
{
	repeated string Realms = 1;
	repeated string Routers = 2;
	repeated string Logins = 3;
}

message RouterSync
{
	uint32 ConnectId = 1;
	string Address = 2;
}

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	string request = 2;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string response = 4;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 MapIndex = 2;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated Unity.Mathematics.float3 Points = 1;
	Unity.Mathematics.quaternion Rotation = 2;
	int32 TurnSpeed = 3;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	Unity.Mathematics.float3 Position = 4;
	Unity.Mathematics.float3 Forward = 5;
	map<int32, int64> KV = 6;
	MoveInfo MoveInfo = 7;
}

message M2C_CreateUnits // IActorLocationMessage
{
	int32 RpcId = 1;
	repeated UnitInfo Units = 2;
}

message M2C_CreateMyUnit // IActorLocationMessage
{
	int32 RpcId = 1;
	UnitInfo Unit = 2;
}

message M2C_StartSceneChange // IActorLocationMessage
{
	int32 RpcId = 1;
	int64 SceneInstanceId = 2;
	string SceneName = 3;	
}

message M2C_RemoveUnits // IActorLocationMessage
{
	int32 RpcId = 1;
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 Position = 2;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 1;
}

message M2C_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 1;
	int64 Id = 2;
	Unity.Mathematics.float3 Position = 3;
	repeated Unity.Mathematics.float3 Points = 4;
}

message M2C_Stop // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 Error = 2;
	int64 Id = 3;
	Unity.Mathematics.float3 Position = 4;
	Unity.Mathematics.quaternion Rotation = 5;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 1;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Time = 4;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 1;
	string  Account = 2;  // 帐号
	string  Password = 3;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string Address = 4;
	int64 Key = 5;
	int64 GateId = 6;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 1;
	int64 Key = 2;  // 帐号
	int64 GateId = 3;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 PlayerId = 4;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 N = 4;
}

message C2M_TestRobotCase2 // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase2 // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_Benchmark
message C2G_Benchmark // IRequest
{
	int32 RpcId = 1;
}

message G2C_Benchmark // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//房卡麻将消息开始

//ResponseType L2C_LoginAccount
message C2L_LoginAccount // IRequest
{
	int32 RpcId = 1;
	string Token = 2;
}

message L2C_LoginAccount // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string GateIPAddress = 4;
	string Token = 5;
}

message A2C_Disconnent // IActorMessage
{
	int32 RpcId = 1;
}

message UserInfo
{
	int32 PlayerId = 1;
    int32 Jewel = 2;
    int32 Glod = 3;
    int32 Gender = 4;
    string HeaderImg = 5;
    int32 Status = 6;
    int32 RoomNumber = 7;
}

//ResponseType G2C_AuthToken
message C2G_AuthToken // IRequest
{
	int32 RpcId = 1;
	string Token = 2;
}

message G2C_AuthToken // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	UserInfo Info = 4;
}

//ResponseType G2C_CreatedRoom
message C2G_CreatedRoom // IRequest
{
	int32 RpcId = 1;
	int32 GameId = 2;
}

message G2C_CreatedRoom // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 RoomId = 4;
}

//ResponseType G2C_EnterRoom
message C2G_EnterRoom // IRequest
{
	int32 RpcId = 1;
	int32 RoomId = 2;
	int32 GameId = 3;
}

message G2C_EnterRoom // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 RoomId = 4;
}

message CardInfo
{
	int32 Type = 1;
	int32 Value = 2;
}

message GamerInfo
{
	int32 PlayerId = 1;
	repeated CardInfo OutCards = 2;
	string Hander = 3;
	string Name = 4;
	repeated CardInfo OpenDeal = 5;
	int32 Score = 6;
	int32 Status = 7;
	repeated CardInfo HandCards = 8;
}

message RoundInfo
{
	int32 StartIndex = 1;
	repeated int32 Score = 2;
	int32 PlayerIndex = 3;
	int32 Status = 4;	
}

message RoomInfo
{
	int32 RoomId = 1;
	repeated GamerInfo Players = 2;
	repeated RoundInfo Rounds = 3;
	int32 Status = 4;
}

//ResponseType M2C_RoomInfo
message C2M_RoomInfo // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 RoomId = 2;
}

message M2C_RoomInfo // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	RoomInfo Info = 4;
}

message M2C_UpdateRoom // IActorLocationMessage
{
    int32 RpcId = 1;
}

//ResponseType M2C_GamerReady
message C2M_GamerReady // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_GamerReady // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message M2C_DealCard // IActorLocationMessage
{
	int32 RpcId = 1;
	repeated Card = 2;
}